// This script is intended to be run such that a PostScript file generated by
// potrace is given on its standard input.  It converts that trace file into a
// JSON format:
//
//   {
//     shapes : [
//       {
//         mainPath : [ { x, y } ... ],
//         holePaths : [ [ { x, y } ... ] ... ]
//       }
//       ...
//     ]
//   }
//
// That JSON data is emitted on standard output.
//
// Each shape's "main path" is its outline or "outermost fence".  The "hole
// paths" are to be subtracted from its outline to give the final shape.

var H = require('highland') // For stream processing
var simplify = require('simplify-js') // For path simplification

var newShape = function () {
  return {
    mainPath : null,
    holePaths : []
  }
}

//
// State
//

// This is what will be output in the end
var shapes = []

// Current parsing state
var currentShape = newShape()
var currentPath = []
var currentAbsolutePosition = { x : 0, y : 0 }

var addPointToCurrentPath = function (x, y) {
  currentPath.push({ x, y })
}

var endCurrentPath = function () {

  currentPath = simplify(currentPath, 5)

  if (!currentShape.mainPath) {
    currentShape.mainPath = currentPath
  } else {
    currentShape.holePaths.push(currentPath)
  }
  currentPath = []
}

var endCurrentShape = function () {
  shapes.push(currentShape)
  currentShape = newShape()
}

var processLine = function (error, line, push, next) {
  if (error) { // Stream error
    push(error)
    next()
  } else if (line === H.nil) { // Stream ended
    push(null, line)
  } else {
    var m

    // Case: command to extend current path
    if (m = line.match(/^(-?\d+)\s+(-?\d+)\s+(rlineto|moveto)$/)) {
      var x = parseInt(m[1], 10)
      var y = parseInt(m[2], 10)
      var method = m[3]
      switch (method) {
        case 'moveto':
          currentAbsolutePosition.x = x
          currentAbsolutePosition.y = y
          break
        case 'rlineto':
          currentAbsolutePosition.x += x
          currentAbsolutePosition.y += y
          break
      }
      addPointToCurrentPath(
          currentAbsolutePosition.x,
          currentAbsolutePosition.y)

      next()

    // Case: command to end the current path
    } else if (line === 'closepath') {
      endCurrentPath()

    // Case: command to end the current shape
    } else if (line === 'fill') {
      endCurrentShape()
    }
    next()
  }
}

var outputResult = function () {
  console.log(JSON.stringify({ shapes : shapes }))
}

H(process.stdin)
  .split() // on newlines
  .consume(processLine)
  .done(outputResult)
